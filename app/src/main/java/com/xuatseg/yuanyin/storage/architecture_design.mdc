---
description: 
globs: 
alwaysApply: false
---
# 存储模块详细架构设计

## 总体架构

存储模块采用多层级存储架构与自适应存储策略相结合的设计方案，形成了一个灵活、高效且可扩展的数据管理系统。整体架构分为五个主要层次，每个层次负责特定的功能，协同工作以提供完整的存储服务。

```
┌─────────────────────────────────────────────────────────────────┐
│                       应用层 (Application Layer)                  │
│  ┌─────────────┐    ┌─────────────┐    ┌─────────────────────┐  │
│  │ ViewModel   │    │ UseCase     │    │ Business Logic      │  │
│  └─────────────┘    └─────────────┘    └─────────────────────┘  │
└───────────────────────────┬─────────────────────────────────────┘
                            │
┌───────────────────────────▼─────────────────────────────────────┐
│                      存储接口层 (Storage API Layer)               │
│  ┌─────────────────────────────────────────────────────────────┐ │
│  │                      IStorageManager                        │ │
│  └─────────────────────────────────────────────────────────────┘ │
│  ┌─────────────┐    ┌─────────────┐    ┌─────────────────────┐  │
│  │ IRepository │    │ IDatabase   │    │ IFileStorage        │  │
│  └─────────────┘    └─────────────┘    └─────────────────────┘  │
└───────────────────────────┬─────────────────────────────────────┘
                            │
┌───────────────────────────▼─────────────────────────────────────┐
│                    自适应策略层 (Adaptive Strategy Layer)          │
│  ┌─────────────────────────┐    ┌───────────────────────────┐   │
│  │    ResourceMonitor      │    │  StorageStrategyEngine    │   │
│  └─────────────────────────┘    └───────────────────────────┘   │
│  ┌─────────────────────────┐    ┌───────────────────────────┐   │
│  │  AdaptiveCacheManager   │    │  DataRetentionManager     │   │
│  └─────────────────────────┘    └───────────────────────────┘   │
└───────────────────────────┬─────────────────────────────────────┘
                            │
┌───────────────────────────▼─────────────────────────────────────┐
│                  存储实现层 (Storage Implementation Layer)         │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐  ┌──────────┐ │
│  │ Room DB     │  │ Realm DB    │  │ File System │  │ DataStore │ │
│  │ Repository  │  │ Repository  │  │ Repository  │  │ Repository│ │
│  └─────────────┘  └─────────────┘  └─────────────┘  └──────────┘ │
└───────────────────────────┬─────────────────────────────────────┘
                            │
┌───────────────────────────▼─────────────────────────────────────┐
│                      基础设施层 (Infrastructure Layer)             │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐  ┌──────────┐ │
│  │ Room        │  │ Realm       │  │ Android     │  │ DataStore │ │
│  │ Database    │  │ Database    │  │ File System │  │           │ │
│  └─────────────┘  └─────────────┘  └─────────────┘  └──────────┘ │
└─────────────────────────────────────────────────────────────────┘
```

## 层次详解

### 1. 应用层 (Application Layer)

应用层位于架构顶部，包含使用存储模块的业务逻辑组件。这一层不是存储模块的一部分，但与存储模块紧密交互。主要组件包括：

- **ViewModel**：管理UI状态，通过存储接口获取和修改数据
- **UseCase**：实现特定业务场景，协调多个存储操作
- **Business Logic**：应用的核心业务规则和流程

应用层通过存储接口层提供的API与存储模块交互，无需关心具体的存储实现细节。

### 2. 存储接口层 (Storage API Layer)

存储接口层是存储模块对外的统一门面，提供清晰而一致的API供应用层使用。主要组件包括：

- **IStorageManager**：存储管理总接口，提供初始化、关闭和获取其他组件的方法
- **IRepository**：泛型存储库接口，提供针对特定数据类型的CRUD和查询操作
- **IDatabase**：数据库访问接口，提供SQL执行和事务支持
- **IFileStorage**：文件存储接口，处理媒体和大型二进制数据
- **IKeyValueStorage**：键值存储接口，处理配置和简单数据

这一层的设计遵循面向接口编程原则，使得上层应用可以独立于具体实现进行开发和测试。

### 3. 自适应策略层 (Adaptive Strategy Layer)

自适应策略层是本架构的核心创新点，负责监控系统资源并根据状态动态调整存储行为。主要组件包括：

- **ResourceMonitor**：监控设备存储空间、内存、网络和电池状态
- **StorageStrategyEngine**：根据资源状态确定最佳存储策略
- **StorageSelector**：根据数据类型和当前策略选择合适的存储实现
- **AdaptiveCacheManager**：动态调整缓存大小和行为
- **DataRetentionManager**：实现数据留存和清理策略

这一层的核心价值在于能够根据设备资源状况自动优化存储行为，在资源紧张时优雅降级，在资源充足时最大化性能。

### 4. 存储实现层 (Storage Implementation Layer)

存储实现层包含各种具体的存储库实现，根据存储策略层的决策提供实际的数据存储服务。主要组件包括：

- **RoomRepository**：基于Room框架的关系型数据库存储实现
- **RealmRepository**：基于Realm的对象数据库存储实现
- **FileRepository**：文件系统存储实现
- **KeyValueRepository**：基于DataStore的键值存储实现

每种实现都专注于特定类型的数据和访问模式，通过策略选择器进行动态选择和切换。

### 5. 基础设施层 (Infrastructure Layer)

基础设施层包含底层的存储技术和库，为上层提供基础功能。主要组件包括：

- **Room Database**：Android官方ORM框架
- **Realm Database**：面向对象数据库
- **Android File System**：文件存储系统
- **DataStore**：键值对存储系统

## 核心组件关系图

以下是核心组件之间的详细关系图，展示了各组件如何协同工作：

```
                        ┌───────────────┐
                        │ IStorageManager│
                        └───────┬───────┘
                                │
                    ┌───────────┴───────────┐
                    │                       │
           ┌────────▼─────────┐    ┌────────▼─────────┐
           │ StorageSelector  │    │ ResourceMonitor  │
           └────────┬─────────┘    └────────┬─────────┘
                    │                       │
                    │               ┌───────▼─────────┐
                    │               │StrategyEngine   │
                    │               └───────┬─────────┘
                    │                       │
        ┌───────────┼───────────────┐      │
        │           │               │      │
┌───────▼───┐ ┌─────▼────┐  ┌──────▼─────┐ │
│ Room Repo │ │Realm Repo│  │File Storage│ │
└───────────┘ └──────────┘  └────────────┘ │
                                           │
                                  ┌────────▼─────────┐
                                  │AdaptiveCacheManager│
                                  └────────┬─────────┘
                                           │
                                  ┌────────▼─────────┐
                                  │DataRetentionManager│
                                  └──────────────────┘
```

## 数据流

### 写入流程

1. 应用层调用Repository方法写入数据
2. 存储API层接收请求并传递给适应策略层
3. StorageSelector根据数据类型和当前策略选择合适的存储实现
4. 选定的存储实现执行实际的写入操作
5. 根据需要更新缓存
6. 返回结果给应用层

### 读取流程

1. 应用层请求数据
2. 存储API层接收请求
3. 检查缓存，如果命中则直接返回
4. 如果缓存未命中，StorageSelector确定最佳数据源
5. 从选定的数据源读取数据
6. 根据当前策略决定是否缓存结果
7. 返回数据给应用层

### 策略调整流程

1. ResourceMonitor持续监控系统资源
2. 当资源状态变化时，通知StrategyEngine
3. StrategyEngine确定新的存储策略
4. 通知相关组件进行调整：
   - CacheManager调整缓存大小
   - DataRetentionManager执行相应的清理策略
   - StorageSelector调整后续选择决策

## 键设计决策

### 1. 多存储技术集成

架构设计支持多种存储技术（Room、Realm、文件系统、DataStore），这一决策基于不同数据类型和访问模式的特点：

- **Room**：适合复杂查询和关系型数据
- **Realm**：适合高频写入和实时数据
- **文件系统**：适合大型媒体数据
- **DataStore**：适合配置和简单键值对

通过StorageSelector的动态选择机制，系统可以根据数据特性和当前环境选择最合适的存储方式。

### 2. 响应式数据架构

采用Flow作为反应式数据流的基础，实现数据变更的自动传播：

- 所有查询操作都有对应的Flow版本
- 数据变更会自动触发Flow的更新
- 与Jetpack Compose集成，实现UI的自动刷新

这一设计简化了数据变更的处理，减少了手动刷新和状态同步的复杂性。

### 3. 自适应资源管理

根据设备资源状态动态调整存储行为：

- 存储空间紧张时自动清理低优先级数据
- 电池电量低时减少后台写入和同步
- 离线状态下切换到本地优先模式
- 内存压力大时缩小缓存大小

这一策略确保了在各种设备条件下的最佳性能和用户体验。

### 4. 事务支持

提供跨存储、跨表的事务支持：

- 数据库操作的原子性保证
- 复杂业务逻辑的一致性保证
- 失败时的自动回滚机制

利用Kotlin的上下文接收器，设计了流畅的事务API，简化了复杂操作的实现。

### 5. 分级数据处理

根据数据重要性和访问频率实现分级处理：

- 关键数据（用户信息、重要配置）：高持久性保证，优先缓存
- 常用数据（最近对话、活跃会话）：平衡持久性和性能
- 临时数据（缓存、日志）：优先清理，低持久性保证

这一分级策略确保了重要数据的可靠性，同时优化了存储空间的使用效率。

## 扩展性设计

1. **插件式存储实现**：
   - 基于接口的设计允许添加新的存储实现
   - 通过DI框架实现运行时组件替换

2. **策略扩展机制**：
   - 可定制的策略决策规则
   - 支持添加新的资源监控维度和策略类型

3. **事件通知系统**：
   - 存储事件的发布-订阅机制
   - 支持自定义事件监听和处理

4. **配置驱动的行为调整**：
   - 通过配置文件调整阈值和策略参数
   - 支持远程配置更新

通过以上设计，存储模块可以适应应用的发展需求，支持功能扩展和性能优化，同时保持架构的稳定性和一致性。

